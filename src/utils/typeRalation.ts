export function calculateTypeEffectiveness(moveType: string, targetTypes: string[]): number {
  // 타입 상성 표 정의
  const typeChart: Record<string, Record<string, number>> = {
    불: { 풀: (2), 얼음: (2), 벌레: (2), 강철: (2), 물: (0.5), 바위: (0.5), 불: (0.5), 드래곤: (0.5) },
    물: { 불: (2), 땅: (2), 바위: (2), 물: (0.5), 풀: (0.5), 드래곤: (0.5) },
    풀: { 물: (2), 땅: (2), 바위: (2), 불: (0.5), 풀: (0.5), 비행: (0.5), 벌레: (0.5), 독: (0.5), 드래곤: (0.5), 강철: (0.5) },
    전기: { 물: (2), 비행: (2), 풀: (0.5), 전기: (0.5), 드래곤: (0.5), 땅: (0) },
    얼음: { 풀: (2), 땅: (2), 비행: (2), 드래곤: (2), 불: (0.5), 물: (0.5), 강철: (0.5), 얼음: (0.5) },
    격투: { 얼음: (2), 바위: (2), 악: (2), 노말: (2), 강철: (2), 벌레: (0.5), 독: (0.5), 비행: (0.5), 에스퍼: (0.5), 페어리: (0.5), 고스트: (0) },
    독: { 풀: (2), 페어리: (2), 독: (0.5), 땅: (0.5), 바위: (0.5), 고스트: (0.5), 강철: (0) },
    땅: { 불: (2), 전기: (2), 독: (2), 바위: (2), 강철: (2), 풀: (0.5), 벌레: (0.5), 비행: (0) },
    비행: { 풀: (2), 격투: (2), 벌레: (2), 전기: (0.5), 바위: (0.5), 강철: (0.5) },
    에스퍼: { 격투: (2), 독: (2), 에스퍼: (0.5), 악: (0.5), 강철: (0.5) },
    벌레: { 풀: (2), 에스퍼: (2), 악: (2), 불: (0.5), 격투: (0.5), 독: (0.5), 비행: (0.5), 고스트: (0.5), 강철: (0.5), 페어리: (0.5) },
    바위: { 불: (2), 얼음: (2), 비행: (2), 벌레: (2), 격투: (0.5), 땅: (0.5), 강철: (0.5) },
    고스트: { 에스퍼: (2), 고스트: (2), 악: (0.5), 노말: (0) },
    드래곤: { 드래곤: (2), 강철: (0.5), 페어리: (0) },
    악: { 에스퍼: (2), 고스트: (2), 격투: (0.5), 악: (0.5), 페어리: (0.5) },
    강철: { 얼음: (2), 바위: (2), 페어리: (2), 불: (0.5), 물: (0.5), 전기: (0.5), 강철: (0.5) },
    페어리: { 격투: (2), 악: (2), 드래곤: (2), 불: (0.5), 독: (0.5), 강철: (0.5) },
    노말: { 바위: (0.5), 강철: (0.5), 고스트: (0) },
  };

  let damageModifier = 1;

  // 각 대상 타입에 대해 상성 계산
  targetTypes.some((targetType) => {
    const effectiveness = typeChart[moveType]?.[targetType] ?? 1; // 특별한 상성관계 없으면 1

    if (effectiveness === 0) {
      // 0 상성에 해당하는 경우, 즉 무효일 경우 
      damageModifier = 0;
      return true; // 즉시 종료
    }

    damageModifier *= effectiveness; // 0이 아닌 경우 기존 방식으로 계산
    return false; // 계속 다음 타입으로 진행
  });

  return damageModifier;
}